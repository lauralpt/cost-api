spring.application.name=ClearingCostAPI
# ==========================================================================
# Configuración de Base de Datos
# ==========================================================================
# Configuración para base de datos H2 en memoria (desarrollo y pruebas)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# Configuración de la consola H2 (accesible en: http://localhost:8081/h2-console)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ==========================================================================
# Configuración de Hibernate
# ==========================================================================
# Configuración de generación del esquema
# ddl-auto: none (se schema.sql) | update (para desarrollo automático)
spring.jpa.hibernate.ddl-auto=none

# Muestra SQL generada por Hibernate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# ==========================================================================
# Inicialización de Scripts SQL
# ==========================================================================
# Ejecuta script schema.sql para crear las tablas al iniciar
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
# Ejecuta script data.sql para insertar datos iniciales en la base de datos
spring.sql.init.data-locations=classpath:data.sql

# ==========================================================================
# Configuración de Logs
# ==========================================================================
# Log para la aplicación
logging.level.org.springframework=INFO
logging.level.com.example.clearingcostapi=DEBUG

# ==========================================================================
# Swagger (OpenAPI) - Documentación de la API
# ==========================================================================
# Acceso a la UI de Swagger: http://localhost:8081/swagger-ui.html
# Swagger (OpenAPI) - Configuración
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.custom-css=/custom-swagger.css



# ==========================================================================
# Configuración de Cliente REST para Binlist
# ==========================================================================
# Configuraciones adicionales (opcional): tiempo de espera en el cliente REST para Binlist API
binlist.api.base-url=https://lookup.binlist.net
binlist.api.connect-timeout=5000   # 5 segundos
binlist.api.read-timeout=10000     # 10 segundos

# ==========================================================================
# Configuración para Producción - MySQL (Desplegable en Docker)
# ==========================================================================
# Descomentar estas líneas para usar MySQL cuando se despliegue en producción
# spring.datasource.url=jdbc:mysql://db:3306/clearing_costs
# spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
# spring.datasource.username=root
# spring.datasource.password=root

# ==========================================================================
# Seguridad y Cors
# ==========================================================================
# Configuración básica de CORS para permitir peticiones desde otros dominios (ajustar según necesidad)
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=*

# ==========================================================================
# Configuración del Servidor
# ==========================================================================
# Configuración del puerto del servidor
server.port=8081



